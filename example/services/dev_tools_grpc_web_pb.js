/**
 * @fileoverview gRPC-Web generated client stub for
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.19.3
// source: svc/frontend/portal/proto/rater/rater.proto

/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = require('./dev_tools_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.DevToolsServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.DevToolsServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ExampleOneRequest,
 *   !proto.ExampleOneResponse>}
 */
const methodDescriptor_DevToolsService_ExampleOne = new grpc.web.MethodDescriptor(
  '/DevToolsService/ExampleOne',
  grpc.web.MethodType.UNARY,
  proto.ExampleOneRequest,
  proto.ExampleOneResponse,
  /**
   * @param {!proto.ExampleOneRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.ExampleOneResponse.deserializeBinary
);


/**
 * @param {!proto.ExampleOneRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ExampleOneResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ExampleOneResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.DevToolsServiceClient.prototype.exampleOne =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/DevToolsService/ExampleOne',
      request,
      metadata || {},
      methodDescriptor_DevToolsService_ExampleOne,
      callback);
};


/**
 * @param {!proto.ExampleOneRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ExampleOneResponse>}
 *     Promise that resolves to the response
 */
proto.DevToolsServicePromiseClient.prototype.exampleOne =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/DevToolsService/ExampleOne',
      request,
      metadata || {},
      methodDescriptor_DevToolsService_ExampleOne);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.AlwaysErrorRequest,
 *   !proto.AlwaysErrorResponse>}
 */
const methodDescriptor_DevToolsService_AlwaysError = new grpc.web.MethodDescriptor(
  '/DevToolsService/AlwaysError',
  grpc.web.MethodType.UNARY,
  proto.AlwaysErrorRequest,
  proto.AlwaysErrorResponse,
  /**
   * @param {!proto.AlwaysErrorRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.AlwaysErrorResponse.deserializeBinary
);


/**
 * @param {!proto.AlwaysErrorRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.AlwaysErrorResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.AlwaysErrorResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.DevToolsServiceClient.prototype.alwaysError =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/DevToolsService/AlwaysError',
      request,
      metadata || {},
      methodDescriptor_DevToolsService_AlwaysError,
      callback);
};


/**
 * @param {!proto.AlwaysErrorRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.AlwaysErrorResponse>}
 *     Promise that resolves to the response
 */
proto.DevToolsServicePromiseClient.prototype.alwaysError =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/DevToolsService/AlwaysError',
      request,
      metadata || {},
      methodDescriptor_DevToolsService_AlwaysError);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.StreamingExampleRequest,
 *   !proto.StreamingExampleResponse>}
 */
const methodDescriptor_DevToolsService_StreamingExample = new grpc.web.MethodDescriptor(
  '/DevToolsService/StreamingExample',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.StreamingExampleRequest,
  proto.StreamingExampleResponse,
  /**
   * @param {!proto.StreamingExampleRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.StreamingExampleResponse.deserializeBinary
);


/**
 * @param {!proto.StreamingExampleRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.StreamingExampleResponse>}
 *     The XHR Node Readable Stream
 */
proto.DevToolsServiceClient.prototype.streamingExample =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/DevToolsService/StreamingExample',
      request,
      metadata || {},
      methodDescriptor_DevToolsService_StreamingExample);
};


/**
 * @param {!proto.StreamingExampleRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.StreamingExampleResponse>}
 *     The XHR Node Readable Stream
 */
proto.DevToolsServicePromiseClient.prototype.streamingExample =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/DevToolsService/StreamingExample',
      request,
      metadata || {},
      methodDescriptor_DevToolsService_StreamingExample);
};


module.exports = proto;

